<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gdu.tagmusic.mapper.MusicMapper">

	<!--  # resultmap : 2번째 방식 사용 -->
	<!--  USERS_DTO --><!--  ACTIVE_LOG_DTO --><!--  MUSIC_DTO -->
	<resultMap type="MusicDTO" id="MusicMap">
		<result column="MUSIC_NO" property="musicNo"></result>
		<result column="EMAIL" property="email"></result>
		<result column="MUSIC_TITLE" property="musicTitle"></result>
		<result column="MUSIC_CONTENT" property="musicContent"></result>
		<result column="MUSIC_ALBUM" property="musicAlbum"></result>
		<result column="MUSIC_GENRE" property="musicGenre"></result>
		<result column="MUSIC_UPLOAD_DATE" property="musicUploadDate"></result>
		<result column="MUSIC_MODIFY_DATE" property="musicModifyDate"></result>
		<result column="IP" property="ip"></result>
		<result column="IMG_ORIGIN" property="imgOrigin"></result>
		<result column="IMG_FILESYSTEM" property="imgFilesystem"></result>
		<result column="MUSIC_ORIGIN" property="musicOrigin"></result>
		<result column="MUSIC_FILESYSTEM" property="musicFilesystem"></result>
		<result column="DOWNLOAD_CNT" property="downloadCnt"></result>
		<result column="IMAGE_PATH" property="imagePath"></result>
		<result column="MUSIC_PATH" property="musicPath"></result>
		<result column="HAS_THUMBNAIL" property="hasThumbNail"></result>
		<association javaType="ActiveLogDTO" property="activeLogDTO">
			<id column="ACTIVE_NO" property="activeNo"></id>
			<result column="EMAIL" property="email"></result>
			<result column="MUSIC_NO" property="musicNo"></result>
			<result column="LAST_LISTEN_DATE" property="lastListenDate"></result>
			<result column="LISTEN_COUNT" property="listenCount"></result>
			<association javaType="UserDTO" property="userDTO">
				<id column="USER_NO" property="userNo"></id>
				<result column="EMAIL" property="email"></result>
				<result column="ARTIST" property="artist"></result>
				<result column="NAME" property="name"></result>
				<result column="PW" property="pw"></result>
				<result column="PROFILE_IMAGE" property="profileImage"></result>
				<result column="MOBILE" property="mobile"></result>
				<result column="GENDER" property="gender"></result>
				<result column="BIRTHYEAR" property="birthyear"></result>
				<result column="BIRTHDAY" property="birthday"></result>
				<result column="POSTCODE" property="postcode"></result>
				<result column="ROAD_ADDRESS" property="roadAddress"></result>
				<result column="JIBUN_ADDRESS" property="jibunAddress"></result>
				<result column="DETAIL_ADDRESS" property="detailAddress"></result>
				<result column="EXTRA_ADDRESS" property="extraAddress"></result>
				<result column="SNS_TYPE" property="snsType"></result>
				<result column="SESSION_ID" property="sessionId"></result>
				<result column="SESSION_LIMIT_DATE" property="sessionLimitDate"></result>
				<result column="JOIN_DATE" property="joinDate"></result>
				<result column="PW_MODIFY_DATE" property="pwModifyDate"></result>
				<result column="INFO_MODIFY_DATE" property="infoModifyDate"></result>
				<result column="AGREE_CODE" property="agreeCode"></result>
			</association>
		</association>
		<association javaType="MusicLikeDTO" property="musicLikeDTO">
			<id column="ACTIVE_NO" property="activeNo"></id>
			<result column="EMAIL" property="email"></result>
			<result column="MUSIC_NO" property="musicNo"></result>
			<result column="LAST_LISTEN_DATE" property="lastListenDate"></result>
			<result column="LISTEN_COUNT" property="listenCount"></result>
			<association javaType="UserDTO" property="userDTO">
				<id column="USER_NO" property="userNo"></id>
				<result column="EMAIL" property="email"></result>
				<result column="ARTIST" property="artist"></result>
				<result column="NAME" property="name"></result>
				<result column="PW" property="pw"></result>
				<result column="PROFILE_IMAGE" property="profileImage"></result>
				<result column="MOBILE" property="mobile"></result>
				<result column="GENDER" property="gender"></result>
				<result column="BIRTHYEAR" property="birthyear"></result>
				<result column="BIRTHDAY" property="birthday"></result>
				<result column="POSTCODE" property="postcode"></result>
				<result column="ROAD_ADDRESS" property="roadAddress"></result>
				<result column="JIBUN_ADDRESS" property="jibunAddress"></result>
				<result column="DETAIL_ADDRESS" property="detailAddress"></result>
				<result column="EXTRA_ADDRESS" property="extraAddress"></result>
				<result column="SNS_TYPE" property="snsType"></result>
				<result column="SESSION_ID" property="sessionId"></result>
				<result column="SESSION_LIMIT_DATE" property="sessionLimitDate"></result>
				<result column="JOIN_DATE" property="joinDate"></result>
				<result column="PW_MODIFY_DATE" property="pwModifyDate"></result>
				<result column="INFO_MODIFY_DATE" property="infoModifyDate"></result>
				<result column="AGREE_CODE" property="agreeCode"></result>
			<!-- 	<association javaType="PlaylistDTO" property="playlistDTO">
					<id column="LIST_NO" property="userNo"></id>
					<result column="EMAIL" property="email"></result>
					<result column="LIST_NAME" property="listName"></result>
				</association> -->
			</association>
		</association>
	</resultMap>
	
	
	<resultMap type="PlaylistDTO" id="PlaylistMap">
		<result column="LIST_NO" property="listNo"></result>
		<result column="EMAIL" property="email"></result>
		<result column="LIST_NAME" property="listName"></result>
		<result column="PLAYLIST_MUSIC_CNT" property="playlistMusicCnt"></result>
		<result column="MUSIC_CNT" property="musicCnt"></result>
		<association javaType="MyMusicDTO" property="myMusicDTO">
			<id column="MY_MUSIC_NO" property="myMusicNo"></id>
			<result column="LIST_NO" property="listNo"></result>
			<result column="MUSIC_NO" property="musicNo"></result>
			<association javaType="MusicDTO" property="musicDTO">
				<id column="MUSIC_NO" property="musicNo"></id>
				<result column="EMAIL" property="email"></result>
				<result column="MUSIC_TITLE" property="musicTitle"></result>
				<result column="MUSIC_CONTENT" property="musicContent"></result>
				<result column="MUSIC_ALBUM" property="musicAlbum"></result>
				<result column="MUSIC_GENRE" property="musicGenre"></result>
				<result column="MUSIC_UPLOAD_DATE" property="musicUploadDate"></result>
				<result column="MUSIC_MODIFY_DATE" property="musicModifyDate"></result>
				<result column="IP" property="ip"></result>
				<result column="IMG_ORIGIN" property="imgOrigin"></result>
				<result column="IMG_FILESYSTEM" property="imgFilesystem"></result>
				<result column="MUSIC_ORIGIN" property="musicOrigin"></result>
				<result column="MUSIC_FILESYSTEM" property="musicFilesystem"></result>
				<result column="DOWNLOAD_CNT" property="downloadCnt"></result>
				<result column="IMAGE_PATH" property="imagePath"></result>
				<result column="MUSIC_PATH" property="musicPath"></result>
				<result column="HAS_THUMBNAIL" property="hasThumbNail"></result>
			</association>
		</association>
		<association javaType="UserDTO" property="userDTO">
			<id column="USER_NO" property="userNo"></id>
			<result column="EMAIL" property="email"></result>
			<result column="ARTIST" property="artist"></result>
			<result column="NAME" property="name"></result>
			<result column="PW" property="pw"></result>
			<result column="PROFILE_IMAGE" property="profileImage"></result>
			<result column="MOBILE" property="mobile"></result>
			<result column="GENDER" property="gender"></result>
			<result column="BIRTHYEAR" property="birthyear"></result>
			<result column="BIRTHDAY" property="birthday"></result>
			<result column="POSTCODE" property="postcode"></result>
			<result column="ROAD_ADDRESS" property="roadAddress"></result>
			<result column="JIBUN_ADDRESS" property="jibunAddress"></result>
			<result column="DETAIL_ADDRESS" property="detailAddress"></result>
			<result column="EXTRA_ADDRESS" property="extraAddress"></result>
			<result column="SNS_TYPE" property="snsType"></result>
			<result column="SESSION_ID" property="sessionId"></result>
			<result column="SESSION_LIMIT_DATE" property="sessionLimitDate"></result>
			<result column="JOIN_DATE" property="joinDate"></result>
			<result column="PW_MODIFY_DATE" property="pwModifyDate"></result>
			<result column="INFO_MODIFY_DATE" property="infoModifyDate"></result>
			<result column="AGREE_CODE" property="agreeCode"></result>
		</association>
	</resultMap>
		
	
	
	
	<!-- [main페이지] -->
	
		<!-- 전체 음악게시글 수 조회 -->
	<!--  # main_최신리스트 : 전체 게시글 수 조회 -->
	<select id="selectMusicCnt" resultType="int">
		SELECT COUNT(MUSIC_NO) 
		FROM MUSIC
	</select>
	
	<!--  # main 페이지 : 전체 게시글 조회 + 해당 게시글을 업로드한 유저의 아티스트명 조회 -->
	<!--  - user, activelog, music(페이징 처리 서브쿼리된) 3단 조인 -->
	<select id="selectUpdatedMusicList" parameterType="Map" resultMap="MusicMap">
		SELECT R.ROW_NUM, R.USER_NO, R.EMAIL, R.ARTIST, R.NAME, R.PW, R.PROFILE_IMAGE, R.MOBILE, R.MUSIC_NO, R.MUSIC_TITLE, R.MUSIC_CONTENT, R.MUSIC_ALBUM, R.MUSIC_GENRE, R.MUSIC_UPLOAD_DATE, R.MUSIC_MODIFY_DATE, R.IP, R.IMG_ORIGIN, R.IMG_FILESYSTEM, R.MUSIC_ORIGIN, R.MUSIC_FILESYSTEM, R.DOWNLOAD_CNT, R.IMG_PATH, R.MUSIC_PATH, R.HAS_THUMBNAIL
    			FROM (SELECT ROW_NUMBER() OVER(ORDER BY B.MUSIC_NO DESC) AS ROW_NUM, B.USER_NO, B.EMAIL, B.ARTIST, B.NAME, B.PW, B.PROFILE_IMAGE, B.MOBILE, B.MUSIC_NO, B.MUSIC_TITLE, B.MUSIC_CONTENT, B.MUSIC_ALBUM, B.MUSIC_GENRE, B.MUSIC_UPLOAD_DATE, B.MUSIC_MODIFY_DATE, B.IP, B.IMG_ORIGIN, B.IMG_FILESYSTEM, B.MUSIC_ORIGIN, B.MUSIC_FILESYSTEM, B.DOWNLOAD_CNT, B.IMG_PATH, B.MUSIC_PATH, B.HAS_THUMBNAIL
            			FROM ( SELECT U.USER_NO, U.EMAIL, U.ARTIST, U.NAME, U.PW, U.PROFILE_IMAGE, U.MOBILE, M.MUSIC_NO, M.MUSIC_TITLE, M.MUSIC_CONTENT, M.MUSIC_ALBUM, M.MUSIC_GENRE, M.MUSIC_UPLOAD_DATE, M.MUSIC_MODIFY_DATE, M.IP, M.IMG_ORIGIN, M.IMG_FILESYSTEM, M.MUSIC_ORIGIN, M.MUSIC_FILESYSTEM, M.DOWNLOAD_CNT, M.IMG_PATH, M.MUSIC_PATH, M.HAS_THUMBNAIL
                    			FROM MUSIC M INNER JOIN USERS U
                    			ON M.EMAIL = U.EMAIL ) B ) R
        WHERE R.ROW_NUM BETWEEN #{begin} AND #{end}
	</select>
	
	
	<!--  # musicDTO 1개 가져오기 -->
	<!--  - 용도 : 썸네일, 상세화면 -->
	<select id="selectMusicByNo" parameterType="int" resultType="MusicDTO">
		SELECT MUSIC_NO, EMAIL, MUSIC_TITLE, MUSIC_CONTENT, MUSIC_ALBUM, MUSIC_GENRE, MUSIC_UPLOAD_DATE, MUSIC_MODIFY_DATE, IP, IMG_ORIGIN, IMG_FILESYSTEM, MUSIC_ORIGIN, MUSIC_FILESYSTEM, DOWNLOAD_CNT, IMG_PATH, MUSIC_PATH, HAS_THUMBNAIL
		  FROM MUSIC
		 WHERE MUSIC_NO = ${musicNo}
	</select>
	
	
	<select id="selectPopularMusicCnt" resultType="int">
		SELECT COUNT(M.MUSIC_NO) 
		FROM MUSIC M INNER JOIN MUSIC_LIKE L
		ON M.MUSIC_NO = L.MUSIC_NO
	</select>
	
	<!-- # 인기리스트4 조회하기 -->
	<select id="selectPopularMusicList" parameterType="Map" resultMap="MusicMap">
	
		SELECT R.ROW_NUM, R.MUSIC_NO, R.HEARTS, R.EMAIL, R.USER_NO, R.ARTIST, R.NAME, R.PW, R.PROFILE_IMAGE, R.MOBILE,  R.MUSIC_TITLE, R.MUSIC_CONTENT, R.MUSIC_ALBUM, R.MUSIC_GENRE, R.MUSIC_UPLOAD_DATE, R.MUSIC_MODIFY_DATE, R.IP, R.IMG_ORIGIN, R.IMG_FILESYSTEM, R.MUSIC_ORIGIN, R.MUSIC_FILESYSTEM, R.DOWNLOAD_CNT, R.IMG_PATH, R.MUSIC_PATH, R.HAS_THUMBNAIL
	    	FROM ( SELECT ROW_NUMBER() OVER(ORDER BY B.HEARTS DESC) AS ROW_NUM, B.USER_NO, B.ARTIST, B.NAME, B.PW, B.PROFILE_IMAGE, B.MOBILE, B.MUSIC_NO, B.HEARTS, B.EMAIL, B.MUSIC_TITLE, B.MUSIC_CONTENT, B.MUSIC_ALBUM, B.MUSIC_GENRE, B.MUSIC_UPLOAD_DATE, B.MUSIC_MODIFY_DATE, B.IP, B.IMG_ORIGIN, B.IMG_FILESYSTEM, B.MUSIC_ORIGIN, B.MUSIC_FILESYSTEM, B.DOWNLOAD_CNT, B.IMG_PATH, B.MUSIC_PATH, B.HAS_THUMBNAIL
	            	FROM ( SELECT U.USER_NO, U.ARTIST, U.NAME, U.PW, U.PROFILE_IMAGE, U.MOBILE, Q.HEARTS, Q.MUSIC_NO, Q.EMAIL, Q.MUSIC_TITLE, Q.MUSIC_CONTENT, Q.MUSIC_ALBUM, Q.MUSIC_GENRE, Q.MUSIC_UPLOAD_DATE, Q.MUSIC_MODIFY_DATE, Q.IP, Q.IMG_ORIGIN, Q.IMG_FILESYSTEM, Q.MUSIC_ORIGIN, Q.MUSIC_FILESYSTEM, Q.DOWNLOAD_CNT, Q.IMG_PATH, Q.MUSIC_PATH, Q.HAS_THUMBNAIL
	                    	FROM USERS U INNER JOIN (SELECT M.MUSIC_NO, COUNT(L.LIKE_NO) AS HEARTS, M.EMAIL, M.MUSIC_TITLE, M.MUSIC_CONTENT, M.MUSIC_ALBUM, M.MUSIC_GENRE, M.MUSIC_UPLOAD_DATE, M.MUSIC_MODIFY_DATE, M.IP, M.IMG_ORIGIN, M.IMG_FILESYSTEM, M.MUSIC_ORIGIN, M.MUSIC_FILESYSTEM, M.DOWNLOAD_CNT, M.IMG_PATH, M.MUSIC_PATH, M.HAS_THUMBNAIL
	                                                	FROM MUSIC M INNER JOIN MUSIC_LIKE L
	                                                	ON M.MUSIC_NO = L.MUSIC_NO INNER JOIN (SELECT MUSIC_NO, EMAIL, MUSIC_TITLE, MUSIC_CONTENT, MUSIC_ALBUM, MUSIC_GENRE, MUSIC_UPLOAD_DATE, MUSIC_MODIFY_DATE, IP, IMG_ORIGIN, IMG_FILESYSTEM, MUSIC_ORIGIN, MUSIC_FILESYSTEM, DOWNLOAD_CNT, IMG_PATH, MUSIC_PATH, HAS_THUMBNAIL
	                                                                                        FROM MUSIC) T
	                                                	ON L.MUSIC_NO = T.MUSIC_NO 
	                                                	GROUP BY M.MUSIC_NO, M.EMAIL, M.MUSIC_TITLE, M.MUSIC_CONTENT, M.MUSIC_ALBUM, M.MUSIC_GENRE, M.MUSIC_UPLOAD_DATE, M.MUSIC_MODIFY_DATE, M.IP, M.IMG_ORIGIN, M.IMG_FILESYSTEM, M.MUSIC_ORIGIN, M.MUSIC_FILESYSTEM, M.DOWNLOAD_CNT, M.IMG_PATH, M.MUSIC_PATH, M.HAS_THUMBNAIL) Q 
	                    ON U.EMAIL = Q.EMAIL ) B ) R
		WHERE R.ROW_NUM BETWEEN #{begin} AND #{end}
		
	
	</select>

	<!-- # 장르별 인기리스트4 조회하기 -->
	<select id="selectPopularMusicGenreList" parameterType="Map" resultMap="MusicMap">
		SELECT R.ROW_NUM, R.MUSIC_NO, R.HEARTS, R.EMAIL, R.USER_NO, R.ARTIST, R.NAME, R.PW, R.PROFILE_IMAGE, R.MOBILE,  R.MUSIC_TITLE, R.MUSIC_CONTENT, R.MUSIC_ALBUM, R.MUSIC_GENRE, R.MUSIC_UPLOAD_DATE, R.MUSIC_MODIFY_DATE, R.IP, R.IMG_ORIGIN, R.IMG_FILESYSTEM, R.MUSIC_ORIGIN, R.MUSIC_FILESYSTEM, R.DOWNLOAD_CNT, R.IMG_PATH, R.MUSIC_PATH, R.HAS_THUMBNAIL
    		FROM ( SELECT ROW_NUMBER() OVER(ORDER BY B.HEARTS DESC) AS ROW_NUM, B.USER_NO, B.ARTIST, B.NAME, B.PW, B.PROFILE_IMAGE, B.MOBILE, B.MUSIC_NO, B.HEARTS, B.EMAIL, B.MUSIC_TITLE, B.MUSIC_CONTENT, B.MUSIC_ALBUM, B.MUSIC_GENRE, B.MUSIC_UPLOAD_DATE, B.MUSIC_MODIFY_DATE, B.IP, B.IMG_ORIGIN, B.IMG_FILESYSTEM, B.MUSIC_ORIGIN, B.MUSIC_FILESYSTEM, B.DOWNLOAD_CNT, B.IMG_PATH, B.MUSIC_PATH, B.HAS_THUMBNAIL
            		FROM ( SELECT U.USER_NO, U.ARTIST, U.NAME, U.PW, U.PROFILE_IMAGE, U.MOBILE, Q.HEARTS, Q.MUSIC_NO, Q.EMAIL, Q.MUSIC_TITLE, Q.MUSIC_CONTENT, Q.MUSIC_ALBUM, Q.MUSIC_GENRE, Q.MUSIC_UPLOAD_DATE, Q.MUSIC_MODIFY_DATE, Q.IP, Q.IMG_ORIGIN, Q.IMG_FILESYSTEM, Q.MUSIC_ORIGIN, Q.MUSIC_FILESYSTEM, Q.DOWNLOAD_CNT, Q.IMG_PATH, Q.MUSIC_PATH, Q.HAS_THUMBNAIL
                    		FROM USERS U INNER JOIN (SELECT M.MUSIC_NO, COUNT(L.LIKE_NO) AS HEARTS, M.EMAIL, M.MUSIC_TITLE, M.MUSIC_CONTENT, M.MUSIC_ALBUM, M.MUSIC_GENRE, M.MUSIC_UPLOAD_DATE, M.MUSIC_MODIFY_DATE, M.IP, M.IMG_ORIGIN, M.IMG_FILESYSTEM, M.MUSIC_ORIGIN, M.MUSIC_FILESYSTEM, M.DOWNLOAD_CNT, M.IMG_PATH, M.MUSIC_PATH, M.HAS_THUMBNAIL
                                                		FROM MUSIC M INNER JOIN MUSIC_LIKE L
                                                		ON M.MUSIC_NO = L.MUSIC_NO INNER JOIN (SELECT MUSIC_NO, EMAIL, MUSIC_TITLE, MUSIC_CONTENT, MUSIC_ALBUM, MUSIC_GENRE, MUSIC_UPLOAD_DATE, MUSIC_MODIFY_DATE, IP, IMG_ORIGIN, IMG_FILESYSTEM, MUSIC_ORIGIN, MUSIC_FILESYSTEM, DOWNLOAD_CNT, IMG_PATH, MUSIC_PATH, HAS_THUMBNAIL
                                                                                        FROM MUSIC) T
                                                		ON L.MUSIC_NO = T.MUSIC_NO 
                                                		GROUP BY M.MUSIC_NO, M.EMAIL, M.MUSIC_TITLE, M.MUSIC_CONTENT, M.MUSIC_ALBUM, M.MUSIC_GENRE, M.MUSIC_UPLOAD_DATE, M.MUSIC_MODIFY_DATE, M.IP, M.IMG_ORIGIN, M.IMG_FILESYSTEM, M.MUSIC_ORIGIN, M.MUSIC_FILESYSTEM, M.DOWNLOAD_CNT, M.IMG_PATH, M.MUSIC_PATH, M.HAS_THUMBNAIL) Q 
                    		ON U.EMAIL = Q.EMAIL ) B 
           		WHERE B.MUSIC_GENRE = #{genre}) R
		WHERE R.ROW_NUM BETWEEN #{begin} AND #{end}
	</select>
	
	<!-- 전체검색 -->
	<!-- 1) 검색한 내용이 존재하는 게시글 수  -->
	
	<select id="selectSearchMusicCnt" parameterType="String" resultType="int">
		SELECT COUNT(*)
		  	  FROM USERS U INNER JOIN MUSIC M
	            ON U.EMAIL = M.EMAIL
	    WHERE M.MUSIC_TITLE LIKE '%' || #{query} || '%' OR U.ARTIST LIKE '%' || #{query} || '%' OR M.MUSIC_GENRE LIKE '%' || #{query} || '%' 
	</select>
	
	<!-- 2) 검색한 내용 조회리스트 -->
	<select id="selectSearchMusicList" parameterType="Map" resultMap="MusicMap">
		SELECT T.USER_NO, T.EMAIL, T.ARTIST, T.NAME, T.PW, T.PROFILE_IMAGE, T.MOBILE, T.MUSIC_NO, T.MUSIC_TITLE, T.MUSIC_CONTENT, T.MUSIC_ALBUM, T.MUSIC_GENRE, T.MUSIC_UPLOAD_DATE, T.MUSIC_MODIFY_DATE, T.IP, T.IMG_ORIGIN, T.IMG_FILESYSTEM, T.MUSIC_ORIGIN, T.MUSIC_FILESYSTEM, T.DOWNLOAD_CNT, T.IMG_PATH, T.MUSIC_PATH, T.HAS_THUMBNAIL
			FROM (SELECT ROW_NUMBER() OVER(ORDER BY B.MUSIC_NO DESC) AS ROW_NUM, B.USER_NO, B.EMAIL, B.ARTIST, B.NAME, B.PW, B.PROFILE_IMAGE, B.MOBILE, B.MUSIC_NO, B.MUSIC_TITLE, B.MUSIC_CONTENT, B.MUSIC_ALBUM, B.MUSIC_GENRE, B.MUSIC_UPLOAD_DATE, B.MUSIC_MODIFY_DATE, B.IP, B.IMG_ORIGIN, B.IMG_FILESYSTEM, B.MUSIC_ORIGIN, B.MUSIC_FILESYSTEM, B.DOWNLOAD_CNT, B.IMG_PATH, B.MUSIC_PATH, B.HAS_THUMBNAIL
        			FROM (SELECT DISTINCT  U.USER_NO, U.EMAIL, U.ARTIST, U.NAME, U.PW, U.PROFILE_IMAGE, U.MOBILE, M.MUSIC_NO, M.MUSIC_TITLE, M.MUSIC_CONTENT, M.MUSIC_ALBUM, M.MUSIC_GENRE, M.MUSIC_UPLOAD_DATE, M.MUSIC_MODIFY_DATE, M.IP, M.IMG_ORIGIN, M.IMG_FILESYSTEM, M.MUSIC_ORIGIN, M.MUSIC_FILESYSTEM, M.DOWNLOAD_CNT, M.IMG_PATH, M.MUSIC_PATH, M.HAS_THUMBNAIL
                  			FROM USERS U INNER JOIN MUSIC M
                    		ON U.EMAIL = M.EMAIL
                			WHERE M.MUSIC_TITLE LIKE '%' || #{query} || '%' OR U.ARTIST LIKE '%' || #{query} || '%' OR M.MUSIC_GENRE LIKE '%' || #{query} || '%' ) B ) T
		WHERE T.ROW_NUM BETWEEN #{begin} AND #{end}
	</select>
	
	<!-- 랭킹 -->
	<select id="selectMusicRanking10" parameterType="Map" resultMap="MusicMap">
		SELECT D.ROW_NUM, D.RANK_CNT, D.MUSIC_NO, D.COMCNT, D.HEARTS, D.USER_NO, D.EMAIL, D.ARTIST, D.NAME, D.PW, D.PROFILE_IMAGE, D.MOBILE, D.MUSIC_TITLE, D.MUSIC_CONTENT, D.MUSIC_ALBUM, D.MUSIC_GENRE, D.MUSIC_UPLOAD_DATE, D.MUSIC_MODIFY_DATE, D.IP, D.IMG_ORIGIN, D.IMG_FILESYSTEM, D.MUSIC_ORIGIN, D.MUSIC_FILESYSTEM, D.DOWNLOAD_CNT, D.IMG_PATH, D.MUSIC_PATH, D.HAS_THUMBNAIL
			FROM  (SELECT B.USER_NO, B.EMAIL, B.ARTIST, B.NAME, B.PW, B.PROFILE_IMAGE, B.MOBILE, B.COMCNT, B.RANK_CNT, ROW_NUMBER() OVER(ORDER BY B.RANK_CNT DESC) AS ROW_NUM, B.MUSIC_NO, B.HEARTS, B.MUSIC_TITLE, B.MUSIC_CONTENT, B.MUSIC_ALBUM, B.MUSIC_GENRE, B.MUSIC_UPLOAD_DATE, B.MUSIC_MODIFY_DATE, B.IP, B.IMG_ORIGIN, B.IMG_FILESYSTEM, B.MUSIC_ORIGIN, B.MUSIC_FILESYSTEM, B.DOWNLOAD_CNT, B.IMG_PATH, B.MUSIC_PATH, B.HAS_THUMBNAIL
					FROM ( SELECT Q.MUSIC_NO, Q.RANK_CNT, Q.HEARTS, Q.COMCNT, U.USER_NO, U.EMAIL, U.ARTIST, U.NAME, U.PW, U.PROFILE_IMAGE, U.MOBILE, Q.MUSIC_TITLE, Q.MUSIC_CONTENT, Q.MUSIC_ALBUM, Q.MUSIC_GENRE, Q.MUSIC_UPLOAD_DATE, Q.MUSIC_MODIFY_DATE, Q.IP, Q.IMG_ORIGIN, Q.IMG_FILESYSTEM, Q.MUSIC_ORIGIN, Q.MUSIC_FILESYSTEM, Q.DOWNLOAD_CNT, Q.IMG_PATH, Q.MUSIC_PATH, Q.HAS_THUMBNAIL
                             FROM USERS U INNER JOIN ( SELECT W.HEARTS + W.COMCNT AS RANK_CNT, W.HEARTS,  W.MUSIC_NO, W.COMCNT, W.EMAIL, W.MUSIC_TITLE, W.MUSIC_CONTENT, W.MUSIC_ALBUM, W.MUSIC_GENRE, W.MUSIC_UPLOAD_DATE, W.MUSIC_MODIFY_DATE, W.IP, W.IMG_ORIGIN, W.IMG_FILESYSTEM, W.MUSIC_ORIGIN, W.MUSIC_FILESYSTEM, W.DOWNLOAD_CNT, W.IMG_PATH, W.MUSIC_PATH, W.HAS_THUMBNAIL 
                                                         	FROM  (SELECT Z.HEARTS,  M.MUSIC_NO, COUNT(P.COMMENT_NO) + Z.HEARTS AS COMCNT, M.EMAIL, M.MUSIC_TITLE, M.MUSIC_CONTENT, M.MUSIC_ALBUM, M.MUSIC_GENRE, M.MUSIC_UPLOAD_DATE, M.MUSIC_MODIFY_DATE, M.IP, M.IMG_ORIGIN, M.IMG_FILESYSTEM, M.MUSIC_ORIGIN, M.MUSIC_FILESYSTEM, M.DOWNLOAD_CNT, M.IMG_PATH, M.MUSIC_PATH, M.HAS_THUMBNAIL
                                                                     FROM MUSIC M INNER JOIN MUSIC_COMMENT P
                                                                     ON M.MUSIC_NO = P.MUSIC_NO INNER JOIN (SELECT M.MUSIC_NO, COUNT(L.LIKE_NO) AS HEARTS, M.EMAIL, M.MUSIC_TITLE, M.MUSIC_CONTENT, M.MUSIC_ALBUM, M.MUSIC_GENRE, M.MUSIC_UPLOAD_DATE, M.MUSIC_MODIFY_DATE, M.IP, M.IMG_ORIGIN, M.IMG_FILESYSTEM, M.MUSIC_ORIGIN, M.MUSIC_FILESYSTEM, M.DOWNLOAD_CNT, M.IMG_PATH, M.MUSIC_PATH, M.HAS_THUMBNAIL
                                                                                                              FROM MUSIC M INNER JOIN MUSIC_LIKE L
                                                                                                               ON M.MUSIC_NO = L.MUSIC_NO INNER JOIN (SELECT MUSIC_NO, EMAIL, MUSIC_TITLE, MUSIC_CONTENT, MUSIC_ALBUM, MUSIC_GENRE, MUSIC_UPLOAD_DATE, MUSIC_MODIFY_DATE, IP, IMG_ORIGIN, IMG_FILESYSTEM, MUSIC_ORIGIN, MUSIC_FILESYSTEM, DOWNLOAD_CNT, IMG_PATH, MUSIC_PATH, HAS_THUMBNAIL
                                                                                                                                                       FROM MUSIC) T
                                                                                                               ON L.MUSIC_NO = T.MUSIC_NO
                                                                                                           	GROUP BY M.MUSIC_NO, M.EMAIL, M.MUSIC_TITLE, M.MUSIC_CONTENT, M.MUSIC_ALBUM, M.MUSIC_GENRE, M.MUSIC_UPLOAD_DATE, M.MUSIC_MODIFY_DATE, M.IP, M.IMG_ORIGIN, M.IMG_FILESYSTEM, M.MUSIC_ORIGIN, M.MUSIC_FILESYSTEM, M.DOWNLOAD_CNT, M.IMG_PATH, M.MUSIC_PATH, M.HAS_THUMBNAIL) Z
                                                                     ON P.MUSIC_NO = Z.MUSIC_NO
                                                                     GROUP BY Z.HEARTS, M.MUSIC_NO, M.EMAIL, M.MUSIC_TITLE, M.MUSIC_CONTENT, M.MUSIC_ALBUM, M.MUSIC_GENRE, M.MUSIC_UPLOAD_DATE, M.MUSIC_MODIFY_DATE, M.IP, M.IMG_ORIGIN, M.IMG_FILESYSTEM, M.MUSIC_ORIGIN, M.MUSIC_FILESYSTEM, M.DOWNLOAD_CNT, M.IMG_PATH, M.MUSIC_PATH, M.HAS_THUMBNAIL) W ) Q 
                            ON U.EMAIL = Q.EMAIL ) B ) D
		WHERE D.ROW_NUM BETWEEN #{begin} AND #{end}
	</select>
	
	
	<!-- [유저 서비스] -->


	<!-- 1. 유저의 플레이리스트 개수   -->
	<select id="selectUserPlaylistCnt" parameterType="Map" resultType="int">
	
		SELECT COUNT(DISTINCT P.LIST_NO)  AS CNT
			FROM PLAYLIST P INNER JOIN USERS U
		    ON P.EMAIL = U.EMAIL INNER JOIN MY_MUSIC Y
		    ON Y.LIST_NO = P.LIST_NO
		WHERE U.USER_NO = #{userNo} AND U.EMAIL = #{email}
		
	</select>
	
	<!-- 2. 유저의 플레이리스트 목록 조회 -->
	<select id="selectUserPlaylist" parameterType="Map" resultMap="PlaylistMap">
	
		SELECT B.ROW_NUM, B.LIST_NO, B.EMAIL, B.LIST_NAME, B.MUSIC_CNT
			FROM ( SELECT ROW_NUMBER() OVER(ORDER BY A.LIST_NO DESC) AS ROW_NUM, A.LIST_NO, A.EMAIL, A.LIST_NAME, A.MUSIC_CNT
        			FROM ( SELECT COUNT(C.MY_MUSIC_NO) AS MUSIC_CNT, C.LIST_NO, C.EMAIL, C.LIST_NAME
                                FROM ( SELECT P.LIST_NO, P.EMAIL, P.LIST_NAME, Y.MY_MUSIC_NO
                                        FROM PLAYLIST P INNER JOIN USERS U 
                                        ON U.EMAIL = P.EMAIL INNER JOIN MY_MUSIC Y
                                        ON Y.LIST_NO = P.LIST_NO INNER JOIN MUSIC M
                                        ON Y.MUSIC_NO = M.MUSIC_NO
                                        WHERE U.EMAIL = #{email} AND U.USER_NO = #{userNo} ) C
        						GROUP BY C.LIST_NO, C.LIST_NO, C.EMAIL, C.LIST_NAME ) A ) B
		WHERE B.ROW_NUM BETWEEN 1 AND 5
		
	</select>
	
	<!-- 3.유저의 플레이리스트 내 수록곡 수 -->
	<select id="selectUserPlaylistMusicCnt" parameterType="int" resultType="int">
		SELECT COUNT(*)
		FROM PLAYLIST
		WHERE LIST_NO = #{listNo}
	</select>
	
	<!-- 4. 플레이리스트 수록곡 목록조회 -->
	<select id="selectUserPlaylistMusiclist" parameterType="Map" resultMap="PlaylistMap">
		SELECT R.ROW_NUM, R.MY_MUSIC_NO, R.LIST_NO, R.ARTIST, R.MUSIC_NO, R.MUSIC_TITLE, R.MUSIC_CONTENT, R.MUSIC_ALBUM, R.MUSIC_GENRE, R.MUSIC_UPLOAD_DATE, R.MUSIC_MODIFY_DATE, R.IP, R.IMG_ORIGIN, R.IMG_FILESYSTEM, R.MUSIC_ORIGIN, R.MUSIC_FILESYSTEM, R.DOWNLOAD_CNT, R.IMG_PATH, R.MUSIC_PATH, R.HAS_THUMBNAIL
    		FROM (SELECT ROW_NUMBER() OVER(ORDER BY B.MUSIC_NO DESC) AS ROW_NUM, B.MY_MUSIC_NO, B.LIST_NO, B.ARTIST, B.MUSIC_NO, B.MUSIC_TITLE, B.MUSIC_CONTENT, B.MUSIC_ALBUM, B.MUSIC_GENRE, B.MUSIC_UPLOAD_DATE, B.MUSIC_MODIFY_DATE, B.IP, B.IMG_ORIGIN, B.IMG_FILESYSTEM, B.MUSIC_ORIGIN, B.MUSIC_FILESYSTEM, B.DOWNLOAD_CNT, B.IMG_PATH, B.MUSIC_PATH, B.HAS_THUMBNAIL
            		FROM (  SELECT Y.MY_MUSIC_NO, Y.LIST_NO, U.ARTIST, M.MUSIC_NO, M.MUSIC_TITLE, M.MUSIC_CONTENT, M.MUSIC_ALBUM, M.MUSIC_GENRE, M.MUSIC_UPLOAD_DATE, M.MUSIC_MODIFY_DATE, M.IP, M.IMG_ORIGIN, M.IMG_FILESYSTEM, M.MUSIC_ORIGIN, M.MUSIC_FILESYSTEM, M.DOWNLOAD_CNT, M.IMG_PATH, M.MUSIC_PATH, M.HAS_THUMBNAIL
                    		FROM MY_MUSIC Y INNER JOIN MUSIC M
                    		ON Y.MUSIC_NO = M.MUSIC_NO INNER JOIN PLAYLIST P
                    		ON P.LIST_NO = Y.LIST_NO INNER JOIN USERS U
                    		ON U.EMAIL = P.EMAIL
                    		WHERE Y.LIST_NO = #{listNo} ) B ) R
		WHERE R.ROW_NUM BETWEEN #{begin} AND #{end}
	</select>
	
	<!-- 5. 플레이리스트명 수정 -->
	<update id="updatePlaylistName" parameterType="Map">
		UPDATE PLAYLIST SET LIST_NAME = #{listName} 
		WHERE LIST_NO = #{listNo}
	</update>
	
	<!-- 6. 플레이리스트 삭제 -->
	<delete id="deletePlaylist" parameterType="Map">
		DELETE FROM PLAYLIST WHERE LIST_NO = #{listNo}
	</delete>
	
		
	<!-- 7. 수록곡 삭제 -->
	<delete id="deletePlaylistMusic" parameterType="Map">
		DELETE FROM MY_MUSIC WHERE MY_MUSIC_NO = #{myMusicNo} AND LIST_NO = #{listNo}
	</delete>
	
	

	
	
	
	
	
	<!--  3. 유저 플레이리스트 썸네일 가져오기	<select id="selectUserPlaylistThumbnail" parameterType="int" resultType="MusicDTO">
		SELECT B.LIST_NO, B.MUSIC_NO, B.EMAIL, B.MUSIC_TITLE, B.MUSIC_CONTENT, B.MUSIC_ALBUM, B.MUSIC_GENRE, B.MUSIC_UPLOAD_DATE, B.MUSIC_MODIFY_DATE, B.IP, B.IMG_ORIGIN, B.IMG_FILESYSTEM, B.MUSIC_ORIGIN, B.MUSIC_FILESYSTEM, B.DOWNLOAD_CNT, B.IMG_PATH, B.MUSIC_PATH, B.HAS_THUMBNAIL
			FROM (SELECT ROW_NUMBER() OVER(ORDER BY A.MUSIC_NO DESC) AS ROW_NUM, A.LIST_NO, A.MUSIC_NO, A.EMAIL, A.MUSIC_TITLE, A.MUSIC_CONTENT, A.MUSIC_ALBUM, A.MUSIC_GENRE, A.MUSIC_UPLOAD_DATE, A.MUSIC_MODIFY_DATE, A.IP, A.IMG_ORIGIN, A.IMG_FILESYSTEM, A.MUSIC_ORIGIN, A.MUSIC_FILESYSTEM, A.DOWNLOAD_CNT, A.IMG_PATH, A.MUSIC_PATH, A.HAS_THUMBNAIL
			        FROM ( SELECT Y.LIST_NO, M.MUSIC_NO, M.EMAIL, M.MUSIC_TITLE, M.MUSIC_CONTENT, M.MUSIC_ALBUM, M.MUSIC_GENRE, M.MUSIC_UPLOAD_DATE, M.MUSIC_MODIFY_DATE, M.IP, M.IMG_ORIGIN, M.IMG_FILESYSTEM, M.MUSIC_ORIGIN, M.MUSIC_FILESYSTEM, M.DOWNLOAD_CNT, M.IMG_PATH, M.MUSIC_PATH, M.HAS_THUMBNAIL
			                FROM MUSIC M INNER JOIN MY_MUSIC Y
			                ON M.MUSIC_NO = Y.MUSIC_NO
			                WHERE Y.LIST_NO = #{listNo}  ) A ) B
			WHERE B.ROW_NUM = 1
	</select> -->

	
	<!-- 4. 유저 플레이리스트명 받아오기	<select id="selectUserPlaylistName" parameterType="int" resultType="String">
		SELECT LIST_NAME
		FROM PLAYLIST
		WHERE LIST_NO = #{listNo}
	</select>
	  -->

	
	<!-- 5> 유저 플레이리스트 수정	 <update id="updateMusiclistName" parameterType="Map">
		
		 UPDATE PLAYLIST SET LIST_NAME = #{listName} 
		 WHERE LIST_NO = #{listNo} AND EMAIL = #{email}
		 
	</update> -->

	
	<!--  6. 유저 플레이리스트 삭제	
	 <delete id="deletePalylist" parameterType="PMap">
	
		DELETE FROM PLAYLIST WHERE LIST_NO = #{listNo} AND EMAIL = #{email}
		
	</delete> -->
	

	
	<!-- 4. 플레이리스트 추가 -->
	<!-- <insert id="insertPlaylist" parameterType="map" >
		INSERT INTO PLAYLIST VALUES (PLAYLIST_SEQ.NEXTVAL, #{email}, #{listName})
	</insert> -->
	
	<!-- 5. 플레이리스트 생성방지 	<select id="selectUserMusiclistCntInercet" parameterType="String" resultType="int" >
		SELECT COUNT(*) 
		FROM PLAYLIST
		WHERE EMAIL = #{email}
	
	</select>
	
	-->


	
	
	

	

	
</mapper>













